#7-base_geometry.txt
====================
doctest for 7-base_geometry.py
==============================


#First importt the class:
========================

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

#Create an object:
=================

	>>> bg = BaseGeometry()

#Typical cases:
==============

	>>> bg.integer_validator("my_int", 12)

	>>> bg.integer_validator("width", 89)

	>>> bg.area()
	Traceback (most recent call last):
        ...
	Exception: area() is not implemented

#Case of value not int:
=======================

	>>> bg.integer_validator("name", "John")
	Traceback (most recent call last):
	...
	TypeError: name must be an integer

	>>> bg.integer_validator("name", 65.25)
	Traceback (most recent call last):
        ...
        TypeError: name must be an integer

	>>> bg.integer_validator("name", [25])
        Traceback (most recent call last):
        ...
        TypeError: name must be an integer

	>>> bg.integer_validator("name", None)
        Traceback (most recent call last):
        ...
        TypeError: name must be an integer

	>>> bg.integer_validator("name", True)
        Traceback (most recent call last):
        ...
        TypeError: name must be an integer

	>>> bg.integer_validator("name")
        Traceback (most recent call last):
        ...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

	>>> bg.integer_validator()
        Traceback (most recent call last):
        ...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

#Case of value = 0:
==================

	>>> bg.integer_validator("age", 0)
	Traceback (most recent call last):
        ...
	ValueError: age must be greater than 0

#Case of negative value:
=======================

	>>> bg.integer_validator("distance", -4)
	Traceback (most recent call last):
        ...
        ValueError: distance must be greater than 0


